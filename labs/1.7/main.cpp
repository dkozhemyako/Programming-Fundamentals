/**
 * Done by:
 * Student Name: Dima Kozhemiako
 * Student Group: 123
 * Lab 1.7
 */

#include <iostream>

static int nA = 10; //статична глобальна
static int nB;

int main() {
    nB = 20;
    {
        static int nE = 5; //статична локальна
        int nC;
        nC = nA * 12;
        nE = nC + nB;

        int nA = 5;
        //nC = nA * 12;
        nC = ::nA * 12;

    }

    //nE = nB + 10; статична змінна недоступна поза блоком
    nA += 10;
    nB++;

    float fltk = 20;
    int nL = 0;
    {
        
        int nA = 5;
    }

    {
        //нема доступу до nA;
        int nB = 4;
        {
            nB = 7;
            int nC = 2;
        }
        //нема доступу до nC;
    }

    for (i = 0; i < 5; ++i) {
        static int nF = 0;
        nF++;

        int nS = 0;
        nS++;
        nL++:
    }

    char cA = "!";
    {
        char cA = "?";
        int nQ = 1;
        {
            char cA = "@";
            int nQ = 2;
            int nM = 6;
        }
        nQ = nQ + 5;
    }

    for (int i = 0; i < 5; i = i + 1)
    {
        static int iA = 0; // статична змінна
        int iB = 0; // динамічна (локальна) змінна

        iA = iA + 1; // накопичує значення
        iB = iB + 1; // обнуляється
    }

    /*
    Пояснення поведінки змінних
        Статичні змінні зберігають своє значення між викликами. Вони ініціалізуються лише один раз, при першому вході в блок коду.
        Локальні змінні (які не є статичними) ініціалізуються кожного разу при вході в блок коду. Тобто, при кожній ітерації циклу iB буде створена заново, і ініціалізується значенням 0.
        
        Основна різниця полягає в життєвому циклі змінних:

        Статичні змінні зберігають своє значення між викликами (в межах блоку коду).
        Локальні змінні ініціалізуються і знищуються при кожному вході в блок, тому їх значення завжди починається з початкового значення.
    */

    int* pI;
    pI = new int;
    *pI = 25;
    delete pI;

    int* pW;
    pW = new int;
    *pW = 10;
    pW = pI;
    delete pW;

    return 0;
}
